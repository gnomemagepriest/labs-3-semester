main.cpp:
#include <iostream>
#include "Game.h"

int main() {
    Game game = Game();

    game.run();

    return 0;
}

Entity.h:
#pragma once
#include <string>
#include <vector>
#include "Item.h"

class Logger;
class Map;
class Game;

class Entity
{
protected:
	std::string Name;
	int Health, Defense, Level;
	char Symbol;
	std::vector<Item> Inventory;
public: 
	bool takeDamage(int damageTaken);
	char getChar();
	std::string getName();
	int x, y;
	void addItem(Item item);
};


Entity.cpp:
#include "Entity.h"

bool Entity::takeDamage(int damageTaken) {
	damageTaken -= Defense;
	if (damageTaken > 0) {
		Health -= damageTaken;
		return true;
	}
	return false;
}

char Entity::getChar() {
	return Symbol;
}

std::string Entity::getName() {
	return Name;
}

void Entity::addItem(Item item) {
	Inventory.push_back(item);
}

Enemy.h:
#pragma once
#include "Entity.h"

class Enemy : public Entity
{
private:
	int XPValue;
	int Agression;
public:
	Enemy();
	//friend void Player::getXP(const Enemy& enemy);
	int getLevel();
	int getXPValue();
};


Enemy.cpp:
#include "Enemy.h"

Enemy::Enemy() {
	Name = "Zombie";
	Health = 5;
	Defense = 1;
	Level = 1;
	Agression = 100;
	XPValue = 50;
	Symbol = 'Z';
}

int Enemy::getLevel() {
	return Level;
}

int Enemy::getXPValue() {
	return XPValue;
}

Player.h:
#pragma once
#include "Entity.h"

class Player : public Entity {
private:
	int XP;
	char input;
public:
	Player();
	//void getXP(Enemy& enemy);
	bool isAlive();
	void setInput(char newInput);
	std::string getInventoryDescription();
};

Player.cpp:
#include "Player.h"

Player::Player() {
	Health = 50;
	Defense = 5;
	Level = 1;
	XP = 0;
	Name = "Player";
	Symbol = '@';
	x = 10;
	y = 10;
}

bool Player::isAlive() {
	return Health > 0;
}

void Player::setInput(char newInput) {
	input = newInput;
}

std::string Player::getInventoryDescription() {
	if (Inventory.empty()) {
		return "You don't have any items.";
	}

	std::string result = "You have: \n";
	for (Item item : Inventory) {
		result += "- " + item.getName() + "\n";
	}
	return result;
}


Tile.h:
#pragma once
#include <vector>
#include "Entity.h"

enum class TileType {
	WALL,
	FLOOR,
	DOOR
};

class Map;

class Tile
{
	friend class Map;
	friend class Game;
private:
	TileType Type;
	Entity* entity;
	std::vector<Item> items;
public:
	Tile(TileType typeOfTile);
	Tile(Entity* entityOnTile);
	void addItem(Item item);
	bool hasEntity();
	bool hasItems();
	bool isWalkable();
	void onMove();
	void placeEntity(Entity* newEntity);
	void deleteEntity();
	void deleteItems();
	std::vector<Item> getItems();
};



Tile.cpp:
#include "Tile.h"

Tile::Tile(TileType typeOfTile) {
	Type = typeOfTile;
	entity = nullptr;
}

Tile::Tile(Entity* entityOnTile) {
	Type = TileType::FLOOR;
	entity = entityOnTile;
}

bool Tile::hasEntity() {
	return entity != nullptr;
}

bool Tile::hasItems() {
	return !items.empty();
}

bool Tile::isWalkable() {
	return Type != TileType::WALL;
}

void Tile::addItem(Item newItem) {
	items.push_back(newItem);
}

void Tile::onMove() {
	if (Type == TileType::DOOR) {
		Type = TileType::FLOOR;
	}
}

void Tile::placeEntity(Entity* newEntity) {
	entity = newEntity;
}

void Tile::deleteEntity() {
	entity = nullptr;
}

void Tile::deleteItems() {
	items.clear();
}

std::vector<Item> Tile::getItems()
{
	return items;
}


Map.h:
#pragma once
#include "Tile.h"
#include <vector>

class Map {
    friend class Game;
private:
    std::vector<std::vector<Tile>> tiles;
    int width;
    int height;

    struct Room {
        int x, y, width, height;
    };

    std::vector<Room> rooms;
    void createCorridor(int centerX1, int centerY1, int centerX2, int centerY2);
public:
    Map(int width, int height);
    void setTile(int x, int y, TileType type);
    Tile* getTile(int x, int y);
    void setTile(int x, int y, Tile newTile);
    void displayMap();
    bool generateDungeonLevel(int maxFeatures);
};

Map.cpp:
#include "Map.h"
#include <iostream>
#include <cstdlib>

Map::Map(int width, int height) : width(width), height(height) {
    tiles.resize(height, std::vector<Tile>(width, Tile(TileType::WALL)));
}

void Map::setTile(int x, int y, TileType type) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
        tiles[y][x] = Tile(type);
    }
}

void Map::setTile(int x, int y, Tile newTile) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
        tiles[y][x] = newTile;
    }
}

Tile* Map::getTile(int x, int y) {
    return &tiles[y][x];
}

void Map::displayMap() {
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            char symbol = 0;
            Tile currentTile = tiles[y][x];
            switch (currentTile.Type) {
            case TileType::WALL: symbol = ' '; break;
            case TileType::FLOOR: symbol = '.'; break;
            case TileType::DOOR: symbol = '+'; break;
            default: break;
            }

            if (currentTile.hasEntity()) {
                symbol = currentTile.entity->getChar();
            }
            else if (currentTile.hasItems()) {
                symbol = currentTile.getItems()[0].getSymbol();
            }

            std::cout << symbol << ' ';
        }
        std::cout << std::endl;
    }
}

void Map::createCorridor(int x1, int y1, int x2, int y2) {
    // Создание коридора от (x1, y1) до (x2, y2)
    if (x1 > x2) std::swap(x1, x2); //  x1 <= x2
    if (y1 > y2) std::swap(y1, y2); //  y1 <= y2
    int x, y;
    // Если коридор горизонтальный
    for (x = x1; x <= x2; ++x) {
        setTile(x, y1, TileType::FLOOR);
    }

    // Если коридор вертикальный
    for (y = y1; y <= y2; ++y) {
        setTile(x2, y, TileType::FLOOR);
    }

}

bool Map::generateDungeonLevel(int maxFeatures) {
    // Выкапываем одну комнату в центре карты
    int roomWidth = 5 + std::rand() % 6;
    int roomHeight = 5 + std::rand() % 6;
    int roomX = (width - roomWidth) / 2;
    int roomY = (height - roomHeight) / 2;

    Room initialRoom = { roomX, roomY, roomWidth, roomHeight };
    rooms.push_back(initialRoom);

    for (int y = roomY; y < roomY + roomHeight; ++y) {
        for (int x = roomX; x < roomX + roomWidth; ++x) {
            tiles[y][x].Type = TileType::FLOOR;
        }
    }

    for (int i = 0; i < maxFeatures; ++i) {
        Room& room = rooms[std::rand() % rooms.size()];

        int wall = std::rand() % 4;

        Room newRoom;
        switch (wall) {
        case 0: // Верхняя стена
            newRoom.x = room.x + std::rand() % room.width;
            newRoom.y = room.y - (2 + std::rand() % 3), 0; // Добавляем коридор вверх
            newRoom.width = 3 + std::rand() % 4; // Ширина нового объекта
            newRoom.height = 2 + std::rand() % 3; // Высота нового объекта
            break;
        case 1: // Нижняя стена
            newRoom.x = room.x + std::rand() % room.width;
            newRoom.y = room.y + room.height + (1 + std::rand() % 3); // Добавляем коридор вниз
            newRoom.width = 3 + std::rand() % 4;
            newRoom.height = 2 + std::rand() % 3;
            break;
        case 2: // Левая стена
            newRoom.x = room.x - (2 + std::rand() % 3); // Добавляем коридор влево
            newRoom.y = room.y + std::rand() % room.height;
            newRoom.width = 2 + std::rand() % 3;
            newRoom.height = 3 + std::rand() % 4;
            break;
        case 3: // Правая стена
            newRoom.x = room.x + room.width + (1 + std::rand() % 3); // Добавляем коридор вправо
            newRoom.y = room.y + std::rand() % room.height;
            newRoom.width = 2 + std::rand() % 3;
            newRoom.height = 3 + std::rand() % 4;
            break;
        }

        // Проверка на возможность добавления нового объекта
        bool canAdd = true;
        for (const auto& r : rooms) {
            if (newRoom.x < 0 || newRoom.y < 0 || newRoom.x + newRoom.width > width || newRoom.y + newRoom.height > height
                || !(newRoom.x + newRoom.width <= r.x || newRoom.x >= r.x + r.width ||
                newRoom.y + newRoom.height <= r.y || newRoom.y >= r.y + r.height)) {
                canAdd = false;
                break;
            }
        }

        if (canAdd) {
            int centerX1 = room.x + room.width / 2;
            int centerY1 = room.y + room.height / 2;
            int centerX2 = newRoom.x + newRoom.width / 2;
            int centerY2 = newRoom.y + newRoom.height / 2;

            createCorridor(centerX1, centerY1, centerX2, centerY2);

            rooms.push_back(newRoom);
            for (int y = newRoom.y; y < newRoom.y + newRoom.height; ++y) {
                for (int x = newRoom.x; x < newRoom.x + newRoom.width; ++x) {
                    tiles[y][x] = TileType::FLOOR;
                }
            }
        }
    }

    return true; // Успешное завершение генерации уровня
}

Logger.h:
#pragma once
#include <string>
#include <vector>

class Logger
{
private:
	std::vector<std::string> logs;
public:
	Logger();
	void addLine(std::string);
	std::string getLastEvents();
};


Logger.cpp:
#include "Logger.h"

Logger::Logger() {
	
}

void Logger::addLine(std::string newLine) {
	if (newLine[newLine.size() - 1] != '\n') {
		newLine += '\n';
	}
	logs.push_back(newLine);
}

std::string Logger::getLastEvents() {
    if (logs.empty())
        return "";

    std::string result;
    if (logs.size() >= 2) {
        result += logs[logs.size() - 2]; // Добавляем предпоследний элемент и перенос строки
    }
    result += logs[logs.size() - 1];

    return result;
}

Item.h:
#pragma once
#include <string>

class Item
{
protected:
	std::string Name;
	char Symbol;
public:
    Item(std::string name);
	std::string getName();
	char getSymbol();
};



Item.cpp:
#include "Item.h"

Item::Item(std::string name) {
	Name = name;
	Symbol = Name[0];
}

std::string Item::getName() {
	return Name;
}

char Item::getSymbol() {
	return Symbol;
}


Game.h:
#pragma once
#include "Player.h"
#include "Enemy.h"
#include "Item.h"
#include "Map.h"
#include "Logger.h"

class Game
{
private:
	Logger logger;
	Map map = Map(40, 20);
	Player player;
	std::vector<Enemy> enemies;
	char input;
	bool running;
	void getInput();
	void placeFeatures();
	void moveEntity(Entity* entity, int dx, int dy);
	void playerTurn();
public:
	Game();
	void run();
	Map* getMap();
};




Game.cpp:
#include "Game.h"
#include <ctime>
#include <cstdlib>
#include <iostream>
#include <tuple>

Game::Game() {
	std::srand(static_cast<unsigned int>(std::time(nullptr)));
	map.generateDungeonLevel(30);
	player = Player();
	input = 0;
	placeFeatures();
	running = true;
}

void Game::playerTurn() {
	int dx = 0, dy = 0;

	switch (input)
	{
	case 'w': {
		dy = -1;
		break;
	}
	case 's': {
		dy = 1;
		break;
	}
	case 'a': {
		dx = -1;
		break;
	}
	case 'd': {
		dx = 1;
		break;
	}
	default:
		break;
	}

	moveEntity(&player, dx, dy);
}

void Game::moveEntity(Entity* entity, int dx, int dy) {
	int newX = entity->x + dx;
	int newY = entity->y + dy;
	Tile* newTile = map.getTile(newX, newY);

	if (newX > 0 && newY > 0 && newTile->isWalkable() && !newTile->hasEntity()) {

		if (newTile->hasItems()) {
			for (Item item : newTile->getItems()) {
				entity->addItem(item);
				logger.addLine(entity->getName() + " has picked up " + item.getName());
			}
			newTile->deleteItems();
		}
		map.getTile(entity->x, entity->y)->deleteEntity();
		newTile->placeEntity(entity);
		entity->x = newX;
		entity->y = newY;
	}
}

Map* Game::getMap() {
	return &map;
}

void Game::getInput() {
	input = getchar();
	while (getchar() != '\n');
}

void Game::placeFeatures() {
	for (int k = 0; k < 10; k++)
		enemies.push_back(Enemy());

	std::vector<std::tuple<int, int>> freeTiles;

	for (int y = 0; y < map.height; y++) {
		for (int x = 0; x < map.width; x++) {
			if (!map.getTile(x, y)->hasEntity() && map.getTile(x, y)->isWalkable()) {
				freeTiles.push_back(std::tuple<int, int>(x, y));
			}
		}
	}

	for (int i = freeTiles.size() - 1; i >= 1; i--) {
		int j = rand() % (i + 1);
		std::swap(freeTiles[j], freeTiles[i]);
		
	}

	int totalEntities = enemies.size() + 1 + 3; // +1 для игрока + 3 для предметов (временно)
	if (freeTiles.size() < totalEntities) {
		std::cerr << "Недостаточно свободных клеток для размещения всех врагов и игрока." << std::endl;
		throw 3; // Выход из функции, если недостаточно клеток
	}
	
	int i = 0;
	for (Enemy& enemy : enemies) {
		enemy.x = std::get<0>(freeTiles[i]);
		enemy.y = std::get<1>(freeTiles[i]);
		map.setTile(enemy.x, enemy.y, Tile(&enemy));
		std::cout << enemy.x << " " << enemy.y << "\n";
		i++;
	}

	std::vector<Item> itemsToPlace = {Item("Dagger"), Item("Potion"), Item("Shield")};
	for (Item item : itemsToPlace) {
		map.getTile(std::get<0>(freeTiles[i]), std::get<1>(freeTiles[i]))->addItem(item);
		i++;
	}


	player.x = std::get<0>(freeTiles[i]);
	player.y = std::get<1>(freeTiles[i]);
	map.setTile(player.x, player.y, Tile(&player));
}

void Game::run() {
	while (running && player.isAlive()) {
		system("cls");
		map.displayMap();
		std::cout << logger.getLastEvents() << "Input: " << std::endl;

		getInput();
		switch (input)
		{
		case 'q':
			running = false;
			break;
		case 'i':
			std::cout << player.getInventoryDescription();
			while (getchar() != '\n');
			break;
		default:
		{
			playerTurn();
			break;
		}
		}

		for (auto& enemy : enemies) {
			// Случайное перемещение врагов
			moveEntity(&enemy, rand() % 3 - 1, rand() % 3 - 1);
		}
	}
}

